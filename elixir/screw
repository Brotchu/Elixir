defmodule Screw do

  def run(pieces) do
    pieces
    |> Enum.map(&add_thread/1)
    |> Enum.map(&add_head/1)
    |> Enum.each(&output/1)
  end

  def run_lazy(pieces) do
    pieces
    |> Stream.map(&add_thread/1)
    |> Stream.map(&add_head/1)
    |> Enum.each(&output/1)
  end

  def run_batch(pieces) do
    pieces
    |>Stream.chunk(50)
    |>Stream.flat_map(&add_thread_batch/1)
    |>Stream.chunk(50)
    |>Stream.flat_map(&add_head_batch/1)
    |>Enum.each(&output/1)
  end

  defp add_thread(val) do
    Process.sleep(50)
    val<>"--"
  end

  defp add_thread_batch(vals) do
    Process.sleep(50)
    Enum.map(vals,&(&1<>"--"))
  end

  defp add_head(val) do
    Process.sleep(50)
    val<>"o"
  end

  defp add_head_batch(vals) do
    Process.sleep(50)
    Enum.map(vals,&(&1<>"o"))
  end

  defp output(val) do
    IO.inspect val
  end

end
